# Generated by Django 5.2.6 on 2025-10-06 08:16

import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Centre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('centre_code', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_librarian', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('is_site_admin', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('is_other', models.BooleanField(default=False)),
                ('force_password_change', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_permissions', to='auth.permission', verbose_name='user permissions')),
                ('centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='library_app.centre')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('author', models.CharField(max_length=200)),
                ('book_code', models.CharField(max_length=50, unique=True)),
                ('publisher', models.CharField(max_length=200)),
                ('year_of_publication', models.PositiveIntegerField()),
                ('total_copies', models.PositiveIntegerField(default=1)),
                ('available_copies', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books_added', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='library_app.category')),
                ('centre', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='library_app.centre')),
            ],
            options={
                'unique_together': {('book_code', 'centre')},
            },
        ),
        migrations.AddField(
            model_name='category',
            name='centre',
            field=models.ForeignKey(blank=True, help_text='Leave blank for global categories', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='library_app.centre'),
        ),
        migrations.CreateModel(
            name='Borrow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('requested', 'Requested'), ('issued', 'Issued'), ('returned', 'Returned')], default='requested', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True, help_text='When the borrow was requested')),
                ('issue_date', models.DateTimeField(blank=True, help_text='When the book was actually issued by librarian', null=True)),
                ('due_date', models.DateTimeField(blank=True, help_text='The date by which the book must be returned.', null=True)),
                ('return_date', models.DateTimeField(blank=True, help_text='The date when the book was returned.', null=True)),
                ('renewals', models.PositiveIntegerField(default=0, help_text='The number of times the borrow has been renewed.')),
                ('notes', models.TextField(blank=True, null=True)),
                ('book', models.ForeignKey(help_text='The book being borrowed.', on_delete=django.db.models.deletion.CASCADE, related_name='borrows', to='library_app.book')),
                ('issued_by', models.ForeignKey(blank=True, help_text='The librarian who issued the book.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issued_borrows', to=settings.AUTH_USER_MODEL)),
                ('returned_to', models.ForeignKey(blank=True, help_text='The librarian who received the return.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_returns', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user who borrowed the book.', on_delete=django.db.models.deletion.CASCADE, related_name='borrows', to=settings.AUTH_USER_MODEL)),
                ('centre', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='borrows', to='library_app.centre')),
            ],
            options={
                'ordering': ['-request_date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalBook',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('author', models.CharField(max_length=200)),
                ('book_code', models.CharField(db_index=True, max_length=50)),
                ('publisher', models.CharField(max_length=200)),
                ('year_of_publication', models.PositiveIntegerField()),
                ('total_copies', models.PositiveIntegerField(default=1)),
                ('available_copies', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('added_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='library_app.category')),
                ('centre', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='library_app.centre')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical book',
                'verbose_name_plural': 'historical books',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBorrow',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('status', models.CharField(choices=[('requested', 'Requested'), ('issued', 'Issued'), ('returned', 'Returned')], default='requested', max_length=20)),
                ('request_date', models.DateTimeField(blank=True, editable=False, help_text='When the borrow was requested')),
                ('issue_date', models.DateTimeField(blank=True, help_text='When the book was actually issued by librarian', null=True)),
                ('due_date', models.DateTimeField(blank=True, help_text='The date by which the book must be returned.', null=True)),
                ('return_date', models.DateTimeField(blank=True, help_text='The date when the book was returned.', null=True)),
                ('renewals', models.PositiveIntegerField(default=0, help_text='The number of times the borrow has been renewed.')),
                ('notes', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('book', models.ForeignKey(blank=True, db_constraint=False, help_text='The book being borrowed.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='library_app.book')),
                ('centre', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='library_app.centre')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('issued_by', models.ForeignKey(blank=True, db_constraint=False, help_text='The librarian who issued the book.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('returned_to', models.ForeignKey(blank=True, db_constraint=False, help_text='The librarian who received the return.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, help_text='The user who borrowed the book.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical borrow',
                'verbose_name_plural': 'historical borrows',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReservation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('reservation_date', models.DateTimeField(blank=True, editable=False)),
                ('expiry_date', models.DateTimeField(help_text='Date when reservation expires if not fulfilled')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('fulfilled', 'Fulfilled'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('notified', models.BooleanField(default=False, help_text='Whether user has been notified of availability')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('book', models.ForeignKey(blank=True, db_constraint=False, help_text='The book being reserved.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='library_app.book')),
                ('centre', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='library_app.centre')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, help_text='The user who reserved the book.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical reservation',
                'verbose_name_plural': 'historical reservations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTeacherBookIssue',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('student_name', models.CharField(help_text="Student name (doesn't have to be a system user)", max_length=500)),
                ('student_id', models.CharField(blank=True, help_text='Student ID or identifier', max_length=100, null=True)),
                ('status', models.CharField(choices=[('issued', 'Issued to Student'), ('returned', 'Returned to Teacher')], default='issued', max_length=20)),
                ('issue_date', models.DateTimeField(blank=True, editable=False)),
                ('expected_return_date', models.DateTimeField(blank=True, help_text='When teacher expects student to return', null=True)),
                ('actual_return_date', models.DateTimeField(blank=True, help_text='When student actually returned to teacher', null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('book', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='library_app.book')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent_borrow', models.ForeignKey(blank=True, db_constraint=False, help_text='The original library borrow to the teacher', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='library_app.borrow')),
                ('teacher', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'is_teacher': True}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Teacher Book Issue',
                'verbose_name_plural': 'historical Teacher Book Issues',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_date', models.DateTimeField(auto_now_add=True)),
                ('expiry_date', models.DateTimeField(help_text='Date when reservation expires if not fulfilled')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('fulfilled', 'Fulfilled'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('notified', models.BooleanField(default=False, help_text='Whether user has been notified of availability')),
                ('book', models.ForeignKey(help_text='The book being reserved.', on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='library_app.book')),
                ('centre', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservations', to='library_app.centre')),
                ('user', models.ForeignKey(help_text='The user who reserved the book.', on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['reservation_date'],
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('school_code', models.CharField(max_length=30, unique=True)),
                ('centre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.centre')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('child_ID', models.IntegerField(blank=True, null=True, unique=True)),
                ('name', models.CharField(max_length=500)),
                ('school', models.CharField(max_length=500)),
                ('centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='library_app.centre')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeacherBookIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_name', models.CharField(help_text="Student name (doesn't have to be a system user)", max_length=500)),
                ('student_id', models.CharField(blank=True, help_text='Student ID or identifier', max_length=100, null=True)),
                ('status', models.CharField(choices=[('issued', 'Issued to Student'), ('returned', 'Returned to Teacher')], default='issued', max_length=20)),
                ('issue_date', models.DateTimeField(auto_now_add=True)),
                ('expected_return_date', models.DateTimeField(blank=True, help_text='When teacher expects student to return', null=True)),
                ('actual_return_date', models.DateTimeField(blank=True, help_text='When student actually returned to teacher', null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_issues', to='library_app.book')),
                ('parent_borrow', models.ForeignKey(help_text='The original library borrow to the teacher', on_delete=django.db.models.deletion.CASCADE, related_name='teacher_issues', to='library_app.borrow')),
                ('teacher', models.ForeignKey(limit_choices_to={'is_teacher': True}, on_delete=django.db.models.deletion.CASCADE, related_name='books_issued_to_students', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Teacher Book Issue',
                'verbose_name_plural': 'Teacher Book Issues',
                'ordering': ['-issue_date'],
            },
        ),
    ]
